using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CustomizationTool
{
    public class RomPacker
    {
        public RomPacker()
        {

        }

        public void PackToZip(bool System, bool Kernel, bool Recovery, bool wipeUserData)
        {
            string RomBase = AppDomain.CurrentDomain.BaseDirectory + "\\tmp\\level2";

            string UpdaterScript = 
            "ui_print(\"******************************************\");\n" +
            "ui_print(\"      Installing upgrade package\");\n" +
            "ui_print(\"******************************************\");\n" +
            "ui_print(\"    Generated by Customization Tool\");\n\n";

            if (wipeUserData)
            {
                UpdaterScript = UpdaterScript + "ui_print(\"Mounting Data\");\n" +
            "run_program(\"/sbin/mount\", \"-t\", \"auto\", \"/data\");";
                UpdaterScript = UpdaterScript + "ui_print(\"Wiping Data\");\n" +
            "delete_recursive(\"/data\");\n";
            }

            if (System)
            {
                UpdaterScript = UpdaterScript + "ui_print(\"Mounting System\");\n" +
                "run_program(\"/sbin/mount\", \"-t\", \"auto\", \"/system\");\n";
                UpdaterScript = UpdaterScript + "ui_print(\"Wiping System\");\n" +
                "delete_recursive(\"/system\");\n";

                UpdaterScript = UpdaterScript + "ui_print(\"Extracting System\");\n" +
                "package_extract_dir(\"system\", \"/system\");\n\n";

                UpdaterScript = UpdaterScript + "ui_print(\"Symlinking\");\n";
                StreamReader symlinkReader = new StreamReader(AppDomain.CurrentDomain.BaseDirectory + "\\bin\\symlinktable.db");
                string links = "";
                foreach (string line in symlinkReader.ReadToEnd().Split('\n'))
                {
                    string bin = line.Split('|').First();
                    string link = line.Split('|').Last();
                    if (!links.Contains(link + "\n"))
                    {
                        links = links + "\n" + link;
                        if (bin.StartsWith("/system") && File.Exists(RomBase + bin.Replace("/", "\\")) && Directory.Exists(RomBase + Path.GetDirectoryName(link.Replace("/", "\\")))) UpdaterScript = UpdaterScript + "symlink(\"" + bin + "\", \"" + link + "\");\n";
                        else if (bin.Contains("/lib/") && File.Exists(RomBase + bin.Replace("/lib/", "/lib64/").Replace("/", "\\")) && Directory.Exists(RomBase + Path.GetDirectoryName(link.Replace("/", "\\")))) UpdaterScript = UpdaterScript + "symlink(\"" + bin.Replace("/lib/", "/lib64/") + "\", \"" + link + "\");\n";
                        else if (!bin.StartsWith("/system") && File.Exists(RomBase + "\\system\\bin\\" + bin.Replace("/", "\\")) && Directory.Exists(RomBase + Path.GetDirectoryName(link.Replace("/", "\\")))) UpdaterScript = UpdaterScript + "symlink(\"" + bin + "\", \"" + link + "\");\n";
                        else if (!bin.StartsWith("/system") && File.Exists(RomBase + "\\system\\xbin\\" + bin.Replace("/", "\\")) && Directory.Exists(RomBase + Path.GetDirectoryName(link.Replace("/", "\\")))) UpdaterScript = UpdaterScript + "symlink(\"" + bin + "\", \"" + link + "\");\n";
                        else if (bin == "app_process") if (File.Exists(RomBase + "\\system\\bin\\app_process64")) UpdaterScript = UpdaterScript + "symlink(\"" + bin + "64\", \"" + link + "\");\n"; else UpdaterScript = UpdaterScript + "symlink(\"" + bin + "32\", \"" + link + "\");\n";
                        else if (bin == "dalvikvm") if (File.Exists(RomBase + "\\system\\bin\\dalvikvm64")) UpdaterScript = UpdaterScript + "symlink(\"" + bin + "64\", \"" + link + "\");\n"; else UpdaterScript = UpdaterScript + "symlink(\"" + bin + "32\", \"" + link + "\");\n";
                    }
                }
                symlinkReader.Dispose();
                UpdaterScript = UpdaterScript + "\n";

                StreamReader contextReader = new StreamReader(AppDomain.CurrentDomain.BaseDirectory + "\\bin\\contexttable.db");
                foreach (string line in contextReader.ReadToEnd().Split('\n'))
                {
                    string file = line.Split('"')[1].Replace("/", "\\");
                    if (Directory.Exists(RomBase + file)) UpdaterScript = UpdaterScript + line + "\n";
                    else if (File.Exists(RomBase + file)) UpdaterScript = UpdaterScript + line + "\n";
                }
                contextReader.Dispose();
                UpdaterScript = UpdaterScript + "\n";
            }

            // KERNEL
            if (Kernel && File.Exists(AppDomain.CurrentDomain.BaseDirectory + "\\tmp\\level2\\boot.img"))
            {
                UpdaterScript = UpdaterScript + "ui_print(\"Unpacking Kernel\");\n";
                UpdaterScript = UpdaterScript + "package_extract_file(\"boot.img\", \"/dev/block/boot\");\n\n";
            }

            // RECOVERY
            if (Recovery && File.Exists(AppDomain.CurrentDomain.BaseDirectory + "\\tmp\\level2\\recovery.img"))
            {
                UpdaterScript = UpdaterScript + "ui_print(\"Unpacking Kernel\");\n";
                UpdaterScript = UpdaterScript + "package_extract_file(\"recovery.img\", \"/dev/block/recovery\");\n\n";
            }

            // OUTRO
            UpdaterScript = UpdaterScript + "ui_print(\"******************************************\");\n" +
            "ui_print(\"        Successfully Installed\");\n" +
            "ui_print(\"******************************************\");\n" +
            "set_progress(1.0);";
            if (!Directory.Exists(RomBase + "\\META-INF\\com\\google\\android")) Directory.CreateDirectory(RomBase + "\\META-INF\\com\\google\\android");
            if (File.Exists(RomBase + "\\META-INF\\com\\google\\android\\updater-script")) File.Delete(RomBase + "\\META-INF\\com\\google\\android\\updater-script");
            StreamWriter WriteUpdaterScript = new StreamWriter(RomBase + "\\META-INF\\com\\google\\android\\updater-script");
            WriteUpdaterScript.Write(UpdaterScript);
            WriteUpdaterScript.Dispose();
        }
    }
}
